# Generated from C:/Users/oscar/Downloads/Development/TL\CircuitSAT.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,60,398,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,
        1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,
        1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,
        10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,
        13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,
        17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,
        21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,
        27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,
        33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,
        39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,44,1,44,1,
        45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,
        48,1,48,1,48,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,
        51,1,51,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,
        54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,318,8,54,1,55,1,55,1,55,5,
        55,323,8,55,10,55,12,55,326,9,55,3,55,328,8,55,1,56,1,56,5,56,332,
        8,56,10,56,12,56,335,9,56,1,57,1,57,1,57,1,57,5,57,341,8,57,10,57,
        12,57,344,9,57,1,57,1,57,1,57,1,57,1,57,5,57,351,8,57,10,57,12,57,
        354,9,57,1,57,3,57,357,8,57,1,58,1,58,1,58,1,58,5,58,363,8,58,10,
        58,12,58,366,9,58,1,58,1,58,1,58,1,58,5,58,372,8,58,10,58,12,58,
        375,9,58,1,58,1,58,3,58,379,8,58,1,58,1,58,1,59,1,59,1,59,1,59,1,
        60,1,60,5,60,389,8,60,10,60,12,60,392,9,60,1,60,3,60,395,8,60,1,
        61,1,61,1,373,0,62,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
        21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
        43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
        65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,
        87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,
        54,109,55,111,56,113,57,115,58,117,59,119,60,121,0,123,0,1,0,10,
        3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,34,34,4,
        0,10,10,13,13,34,34,92,92,2,0,10,10,13,13,1,0,39,39,4,0,10,10,13,
        13,39,39,92,92,3,0,9,10,12,13,32,32,1,0,49,57,1,0,48,57,409,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
        0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
        0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,
        0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,
        0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,
        0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,
        111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,
        0,0,1,125,1,0,0,0,3,131,1,0,0,0,5,137,1,0,0,0,7,143,1,0,0,0,9,150,
        1,0,0,0,11,155,1,0,0,0,13,159,1,0,0,0,15,162,1,0,0,0,17,167,1,0,
        0,0,19,174,1,0,0,0,21,178,1,0,0,0,23,184,1,0,0,0,25,187,1,0,0,0,
        27,190,1,0,0,0,29,194,1,0,0,0,31,198,1,0,0,0,33,201,1,0,0,0,35,206,
        1,0,0,0,37,209,1,0,0,0,39,212,1,0,0,0,41,215,1,0,0,0,43,218,1,0,
        0,0,45,221,1,0,0,0,47,224,1,0,0,0,49,226,1,0,0,0,51,228,1,0,0,0,
        53,230,1,0,0,0,55,232,1,0,0,0,57,234,1,0,0,0,59,236,1,0,0,0,61,238,
        1,0,0,0,63,240,1,0,0,0,65,243,1,0,0,0,67,245,1,0,0,0,69,247,1,0,
        0,0,71,249,1,0,0,0,73,251,1,0,0,0,75,253,1,0,0,0,77,255,1,0,0,0,
        79,257,1,0,0,0,81,259,1,0,0,0,83,261,1,0,0,0,85,263,1,0,0,0,87,265,
        1,0,0,0,89,267,1,0,0,0,91,271,1,0,0,0,93,275,1,0,0,0,95,279,1,0,
        0,0,97,282,1,0,0,0,99,287,1,0,0,0,101,291,1,0,0,0,103,295,1,0,0,
        0,105,299,1,0,0,0,107,304,1,0,0,0,109,317,1,0,0,0,111,319,1,0,0,
        0,113,329,1,0,0,0,115,356,1,0,0,0,117,378,1,0,0,0,119,382,1,0,0,
        0,121,394,1,0,0,0,123,396,1,0,0,0,125,126,5,112,0,0,126,127,5,114,
        0,0,127,128,5,105,0,0,128,129,5,110,0,0,129,130,5,116,0,0,130,2,
        1,0,0,0,131,132,5,119,0,0,132,133,5,114,0,0,133,134,5,105,0,0,134,
        135,5,116,0,0,135,136,5,101,0,0,136,4,1,0,0,0,137,138,5,105,0,0,
        138,139,5,110,0,0,139,140,5,112,0,0,140,141,5,117,0,0,141,142,5,
        116,0,0,142,6,1,0,0,0,143,144,5,97,0,0,144,145,5,115,0,0,145,146,
        5,115,0,0,146,147,5,101,0,0,147,148,5,114,0,0,148,149,5,116,0,0,
        149,8,1,0,0,0,150,151,5,115,0,0,151,152,5,105,0,0,152,153,5,122,
        0,0,153,154,5,101,0,0,154,10,1,0,0,0,155,156,5,100,0,0,156,157,5,
        101,0,0,157,158,5,102,0,0,158,12,1,0,0,0,159,160,5,105,0,0,160,161,
        5,102,0,0,161,14,1,0,0,0,162,163,5,101,0,0,163,164,5,108,0,0,164,
        165,5,115,0,0,165,166,5,101,0,0,166,16,1,0,0,0,167,168,5,114,0,0,
        168,169,5,101,0,0,169,170,5,116,0,0,170,171,5,117,0,0,171,172,5,
        114,0,0,172,173,5,110,0,0,173,18,1,0,0,0,174,175,5,102,0,0,175,176,
        5,111,0,0,176,177,5,114,0,0,177,20,1,0,0,0,178,179,5,119,0,0,179,
        180,5,104,0,0,180,181,5,105,0,0,181,182,5,108,0,0,182,183,5,101,
        0,0,183,22,1,0,0,0,184,185,5,116,0,0,185,186,5,111,0,0,186,24,1,
        0,0,0,187,188,5,100,0,0,188,189,5,111,0,0,189,26,1,0,0,0,190,191,
        5,97,0,0,191,192,5,115,0,0,192,193,5,109,0,0,193,28,1,0,0,0,194,
        195,5,101,0,0,195,196,5,110,0,0,196,197,5,100,0,0,197,30,1,0,0,0,
        198,199,5,105,0,0,199,200,5,110,0,0,200,32,1,0,0,0,201,202,5,110,
        0,0,202,203,5,117,0,0,203,204,5,108,0,0,204,205,5,108,0,0,205,34,
        1,0,0,0,206,207,5,124,0,0,207,208,5,124,0,0,208,36,1,0,0,0,209,210,
        5,38,0,0,210,211,5,38,0,0,211,38,1,0,0,0,212,213,5,61,0,0,213,214,
        5,61,0,0,214,40,1,0,0,0,215,216,5,33,0,0,216,217,5,61,0,0,217,42,
        1,0,0,0,218,219,5,62,0,0,219,220,5,61,0,0,220,44,1,0,0,0,221,222,
        5,60,0,0,222,223,5,61,0,0,223,46,1,0,0,0,224,225,5,94,0,0,225,48,
        1,0,0,0,226,227,5,33,0,0,227,50,1,0,0,0,228,229,5,62,0,0,229,52,
        1,0,0,0,230,231,5,60,0,0,231,54,1,0,0,0,232,233,5,43,0,0,233,56,
        1,0,0,0,234,235,5,45,0,0,235,58,1,0,0,0,236,237,5,42,0,0,237,60,
        1,0,0,0,238,239,5,47,0,0,239,62,1,0,0,0,240,241,5,47,0,0,241,242,
        5,47,0,0,242,64,1,0,0,0,243,244,5,37,0,0,244,66,1,0,0,0,245,246,
        5,123,0,0,246,68,1,0,0,0,247,248,5,125,0,0,248,70,1,0,0,0,249,250,
        5,91,0,0,250,72,1,0,0,0,251,252,5,93,0,0,252,74,1,0,0,0,253,254,
        5,40,0,0,254,76,1,0,0,0,255,256,5,41,0,0,256,78,1,0,0,0,257,258,
        5,59,0,0,258,80,1,0,0,0,259,260,5,61,0,0,260,82,1,0,0,0,261,262,
        5,44,0,0,262,84,1,0,0,0,263,264,5,63,0,0,264,86,1,0,0,0,265,266,
        5,58,0,0,266,88,1,0,0,0,267,268,5,110,0,0,268,269,5,101,0,0,269,
        270,5,119,0,0,270,90,1,0,0,0,271,272,5,110,0,0,272,273,5,111,0,0,
        273,274,5,116,0,0,274,92,1,0,0,0,275,276,5,97,0,0,276,277,5,110,
        0,0,277,278,5,100,0,0,278,94,1,0,0,0,279,280,5,111,0,0,280,281,5,
        114,0,0,281,96,1,0,0,0,282,283,5,110,0,0,283,284,5,97,0,0,284,285,
        5,110,0,0,285,286,5,100,0,0,286,98,1,0,0,0,287,288,5,110,0,0,288,
        289,5,111,0,0,289,290,5,114,0,0,290,100,1,0,0,0,291,292,5,120,0,
        0,292,293,5,111,0,0,293,294,5,114,0,0,294,102,1,0,0,0,295,296,5,
        101,0,0,296,297,5,113,0,0,297,298,5,117,0,0,298,104,1,0,0,0,299,
        300,5,99,0,0,300,301,5,111,0,0,301,302,5,112,0,0,302,303,5,121,0,
        0,303,106,1,0,0,0,304,305,5,112,0,0,305,306,5,117,0,0,306,307,5,
        116,0,0,307,108,1,0,0,0,308,309,5,116,0,0,309,310,5,114,0,0,310,
        311,5,117,0,0,311,318,5,101,0,0,312,313,5,102,0,0,313,314,5,97,0,
        0,314,315,5,108,0,0,315,316,5,115,0,0,316,318,5,101,0,0,317,308,
        1,0,0,0,317,312,1,0,0,0,318,110,1,0,0,0,319,327,3,121,60,0,320,324,
        5,46,0,0,321,323,3,123,61,0,322,321,1,0,0,0,323,326,1,0,0,0,324,
        322,1,0,0,0,324,325,1,0,0,0,325,328,1,0,0,0,326,324,1,0,0,0,327,
        320,1,0,0,0,327,328,1,0,0,0,328,112,1,0,0,0,329,333,7,0,0,0,330,
        332,7,1,0,0,331,330,1,0,0,0,332,335,1,0,0,0,333,331,1,0,0,0,333,
        334,1,0,0,0,334,114,1,0,0,0,335,333,1,0,0,0,336,342,7,2,0,0,337,
        341,8,3,0,0,338,339,5,92,0,0,339,341,8,4,0,0,340,337,1,0,0,0,340,
        338,1,0,0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,
        345,1,0,0,0,344,342,1,0,0,0,345,357,7,2,0,0,346,352,7,5,0,0,347,
        351,8,6,0,0,348,349,5,92,0,0,349,351,8,4,0,0,350,347,1,0,0,0,350,
        348,1,0,0,0,351,354,1,0,0,0,352,350,1,0,0,0,352,353,1,0,0,0,353,
        355,1,0,0,0,354,352,1,0,0,0,355,357,7,5,0,0,356,336,1,0,0,0,356,
        346,1,0,0,0,357,116,1,0,0,0,358,359,5,47,0,0,359,360,5,47,0,0,360,
        364,1,0,0,0,361,363,8,4,0,0,362,361,1,0,0,0,363,366,1,0,0,0,364,
        362,1,0,0,0,364,365,1,0,0,0,365,379,1,0,0,0,366,364,1,0,0,0,367,
        368,5,47,0,0,368,369,5,42,0,0,369,373,1,0,0,0,370,372,9,0,0,0,371,
        370,1,0,0,0,372,375,1,0,0,0,373,374,1,0,0,0,373,371,1,0,0,0,374,
        376,1,0,0,0,375,373,1,0,0,0,376,377,5,42,0,0,377,379,5,47,0,0,378,
        358,1,0,0,0,378,367,1,0,0,0,379,380,1,0,0,0,380,381,6,58,0,0,381,
        118,1,0,0,0,382,383,7,7,0,0,383,384,1,0,0,0,384,385,6,59,0,0,385,
        120,1,0,0,0,386,390,7,8,0,0,387,389,3,123,61,0,388,387,1,0,0,0,389,
        392,1,0,0,0,390,388,1,0,0,0,390,391,1,0,0,0,391,395,1,0,0,0,392,
        390,1,0,0,0,393,395,5,48,0,0,394,386,1,0,0,0,394,393,1,0,0,0,395,
        122,1,0,0,0,396,397,7,9,0,0,397,124,1,0,0,0,15,0,317,324,327,333,
        340,342,350,352,356,364,373,378,390,394,1,6,0,0
    ]

class CircuitSATLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Println = 1
    Print = 2
    Input = 3
    Assert = 4
    Size = 5
    Def = 6
    If = 7
    Else = 8
    Return = 9
    For = 10
    While = 11
    To = 12
    Do = 13
    Asm = 14
    End = 15
    In = 16
    Null = 17
    Or = 18
    And = 19
    Equals = 20
    NEquals = 21
    GTEquals = 22
    LTEquals = 23
    Pow = 24
    Excl = 25
    GT = 26
    LT = 27
    Add = 28
    Subtract = 29
    Multiply = 30
    Divide = 31
    IDivide = 32
    Modulus = 33
    OBrace = 34
    CBrace = 35
    OBracket = 36
    CBracket = 37
    OParen = 38
    CParen = 39
    SColon = 40
    Assign = 41
    Comma = 42
    QMark = 43
    Colon = 44
    OpNew = 45
    OpNot = 46
    OpAnd = 47
    OpOr = 48
    OpNand = 49
    OpNor = 50
    OpXor = 51
    OpEqu = 52
    OpCopy = 53
    OpPut = 54
    Bool = 55
    Number = 56
    Identifier = 57
    String = 58
    Comment = 59
    Space = 60

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'print'", "'write'", "'input'", "'assert'", "'size'", "'def'", 
            "'if'", "'else'", "'return'", "'for'", "'while'", "'to'", "'do'", 
            "'asm'", "'end'", "'in'", "'null'", "'||'", "'&&'", "'=='", 
            "'!='", "'>='", "'<='", "'^'", "'!'", "'>'", "'<'", "'+'", "'-'", 
            "'*'", "'/'", "'//'", "'%'", "'{'", "'}'", "'['", "']'", "'('", 
            "')'", "';'", "'='", "','", "'?'", "':'", "'new'", "'not'", 
            "'and'", "'or'", "'nand'", "'nor'", "'xor'", "'equ'", "'copy'", 
            "'put'" ]

    symbolicNames = [ "<INVALID>",
            "Println", "Print", "Input", "Assert", "Size", "Def", "If", 
            "Else", "Return", "For", "While", "To", "Do", "Asm", "End", 
            "In", "Null", "Or", "And", "Equals", "NEquals", "GTEquals", 
            "LTEquals", "Pow", "Excl", "GT", "LT", "Add", "Subtract", "Multiply", 
            "Divide", "IDivide", "Modulus", "OBrace", "CBrace", "OBracket", 
            "CBracket", "OParen", "CParen", "SColon", "Assign", "Comma", 
            "QMark", "Colon", "OpNew", "OpNot", "OpAnd", "OpOr", "OpNand", 
            "OpNor", "OpXor", "OpEqu", "OpCopy", "OpPut", "Bool", "Number", 
            "Identifier", "String", "Comment", "Space" ]

    ruleNames = [ "Println", "Print", "Input", "Assert", "Size", "Def", 
                  "If", "Else", "Return", "For", "While", "To", "Do", "Asm", 
                  "End", "In", "Null", "Or", "And", "Equals", "NEquals", 
                  "GTEquals", "LTEquals", "Pow", "Excl", "GT", "LT", "Add", 
                  "Subtract", "Multiply", "Divide", "IDivide", "Modulus", 
                  "OBrace", "CBrace", "OBracket", "CBracket", "OParen", 
                  "CParen", "SColon", "Assign", "Comma", "QMark", "Colon", 
                  "OpNew", "OpNot", "OpAnd", "OpOr", "OpNand", "OpNor", 
                  "OpXor", "OpEqu", "OpCopy", "OpPut", "Bool", "Number", 
                  "Identifier", "String", "Comment", "Space", "Int", "Digit" ]

    grammarFileName = "CircuitSAT.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


